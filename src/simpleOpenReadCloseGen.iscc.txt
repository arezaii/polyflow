Domain := [m_numSubgrids, nz, ny, nx] -> {
    S0[];
    S1[nsg] : 0 <= nsg < m_numSubgrids;
    S2[nsg] : 0 <= nsg < m_numSubgrids and nsg = (m_numSubgrids - 1);
    S3[nsg,k,i] : 0 <= nsg < m_numSubgrids and 0 <= k < nz and 0 <= i < ny;
    S4[nsg,k,i,j] : 0 <= nsg < m_numSubgrids and 0 <= k < nz and 0 <= i < ny and 0 <= j <= nx;
    S5[];
};

Read := [m_numSubgrids] -> {
    S1[] -> m_nx[0];
    S1[] -> m_ny[0];
    S1[] -> m_nz[0];
    S2[nsg] -> m_nx[0];
    S2[nsg] -> m_ny[0];
    S2[nsg] -> m_nz[0];
    S2[nsg] -> nx[0];
    S2[nsg] -> ny[0];
    S2[nsg] -> nz[0];
    S3[nsg,k,i] -> m_nx[0];
    S3[nsg,k,i] -> m_ny[0];
    S3[nsg,k,i] -> qq[0];
    S3[nsg,k,i] -> x[0];
    S3[nsg,k,i] -> y[0];
    S3[nsg,k,i] -> nx[0];
    S4[nsg,k,i,j] -> buf[j];
    S4[nsg,k,i,j] -> index[0];
} * Domain;

Write := [m_numSubgrids, index] -> {
    S0[] -> m_fp[0];
    S0[] -> m_data[0];
    S0[] -> m_numSubgrids[0];
    S0[] -> m_nx[0];
    S0[] -> m_ny[0];
    S0[] -> m_nz[0];
    S1[nsg] -> x[0];
    S1[nsg] -> y[0];
    S1[nsg] -> z[0];
    S1[nsg] -> nx[0];
    S1[nsg] -> ny[0];
    S1[nsg] -> nz[0];
    S1[nsg] -> rx[0];
    S1[nsg] -> ry[0];
    S1[nsg] -> rz[0];
    S1[nsg] -> qq[0];
    S2[nsg] -> m_p[0];
    S2[nsg] -> m_q[0];
    S2[nsg] -> m_r[0];
    S3[nsg,k,i] -> index[0];
    S3[nsg,k,i] -> buf[0];
    S3[nsg,k,i] -> read_count[0];
    S4[nsg,k,i,j] -> tmp[0];
    S4[nsg,k,i,j] -> m_data[index + j];
} * Domain;

Schedule := [m_numSubgrids] -> {
   S0[] ->        [0,0,0,0,0,0];
   S1[nsg] ->     [1,nsg,0,0,0,0];
   S2[nsg] ->     [1,nsg,1,0,0,0];
   S3[nsg,k,i] -> [1,nsg,2,k,i,0];
   S4[nsg,k,i,j]->[1,nsg,2,k,i,j];
   S5[] ->        [2,0,0,0,0,0];

};


Before := Schedule << Schedule;


RaW := (Write . (Read^-1)) * Before;
WaW := (Write . (Write^-1)) * Before;
WaR := (Read . (Write^-1)) * Before;

IslSchedule := schedule Domain respecting (RaW+WaW+WaR) minimizing RaW;
IslSchedule := IslSchedule + {}; # flatten the schedule tree

IslBefore := IslSchedule << IslSchedule;

codegen (Schedule * Domain);
